---
title: "Startup Power Tool: oDesk"
summary: "There are good developers on oDesk if you know where and how to look."
pub-date: 2012-09-15
taglist:
  - Management
  - Offshore
---

I've heard droves of people scoff at working with offshore developers. There are those who will have nothing to do with it, and there are those who say, "Sure, but not for our core product. It's too important to outsource." (or whatever.)

I am here to tell you that bringing a Polish Rails developer, a Russian mathematician, or an Argentinian designer onto your team is not the same thing as shopping out your product to a team of yahoos and passing the responsibility onto them.

As we look to ramp up our spend on oDesk to $20k per month I can officially say that oDesk has been a power tool for us, and I thought I would share a couple of the key lessons I have learned along the way.

<!-- more -->

So let's get to it, then:

### 1. There are top tier engineers on oDesk

The good engineers on oDesk aren't good "for outsourcing." Several engineers I have worked with on oDesk are without question the best engineers I have ever worked with — in person or otherwise — and I have worked with some real badasses (at least by reputation!).

This is not a slight to people I have worked with in Boston, London, or New York. It's a real testament to the caliber of people on that platform.

Lots of these engineers aren't exactly located in startup meccas like the Silicon \[what-have-you\]. They might live in sunny [Taganrog](https://www.google.com/maps/preview#!q=taganrog%2C+russia&data=!4m10!1m9!4m8!1m3!1d88379!2d38.8772335!3d47.237329!3m2!1i1343!2i783!4f13.1), but they're smart and they get shit done, so please don't treat them like illegal immigrants picking your code crops.

### 2. You're hiring individuals, not teams

oDesk isn't traditional outsourcing. Outsourcing connotes — to me — a team in India where you pay for 1 decent engineer but also 4 of "the other guys"…and the "project manager" and the "business analyst" and whatever other ridiculous overheads.

With oDesk, you're only paying for the talent that is doing work, and you pay by the minute. If you have a virtual assistant at $6/hr and need a 20 minute job sorted out, that's $2.

### 3. Specialization isn't just for insects

I have hired 20-30 engineers in my career for full time roles in person, most of them generalists. For people on your internal team, you need to be at scale before you start hiring people who aren't full stack, and full stack badasses can be pricy (in many respects).

But on oDesk you can pay for whatever you need, and that opens the door for specialists. You literally can have 1 hour per week of SEO expertise, 10 hours per week of HTML/CSS build, 25 hours per week of coffeescript, and so on.

Sure, generalists sound good on paper, but paying for a brilliant generalist to learn how to integrate with recurly (a third-party billing platform) on the job is a lot more expensive than paying for a specialist who just implemented it on 3 other projects last month. Fact.

And we can dispense with the argument that generalists have a better sense for the big picture. You do need a genuine architect capability to build software, but that's another post altogether. In my experience, generalist engineers often enough don't take the time to grok the broader scope of the app anyway ("…oh, i didn't realize we were going to…"), despite your best efforts to that end.

More importantly, often enough an engineer will have that little bit of specialized knowledge that can be most dangerous, and their under-informed architectural decisions can wreak of false confidence.

### 4. Same as always: Fast, cheap, or correct. You pick two.

It's an age-old adage. You can have fast, cheap, or correct, but you have to pick which two. Given the choice of fast/cheap, fast/correct, or cheap/correct, I can immediately eliminate fast/cheap.

Then, I can cleanly divide my roadmap into fast tasks (read, "expensive") and cheap tasks (read, "slow"). Either way, I insist on quality.

For cheap/slow tasks, let's dispense with the silly startup myth that everything has to be greasy fast all the time and that you're only working on one thing at a time in a super agile, hot and nasty lightning strike of ninja lava.

The reality is if you can find a few things you know you need done that are off the critical path, you can push those to fixed price projects and afford to cycle through a few \[free\] misfires. Just tee up a low budget, very clear acceptance criteria, and managed expectations for delivery methods, etc.

Then keep your scarce/precious top engineers for the fast task work on the critical path. This is the stuff that stands between you and shipping. Again, it reads well on a startup bumper sticker that you're only going to have urgent stuff on the critical path and that everything else should be swept away. Yawn. Smoke that junk by parallel tracking the stuff you want right but don't need next week.

### 5. Fixed price, then hourly

Careful readers will have caught mention above about free misfires. Let's tug on that thread a bit.

An important reality for oDesk newbies is that there are plentiful amazing engineers on the platform, but they are drowning in a sea of garbage. Fear not, gentle reader. While at first it can feel overwhelming to try to filter your way to the finest engineers, in fact the easiest way to sift through the chaff for the wheat is to insist on fixed price projects at the outset.

Just look at your near-term roadmap, and find something you would pay $1,000 to have done right. Describe the project as crisply and unambiguously as possible, and then post it privately for $500 (or up to $1,000 if it's more urgent). Search for 12-15 engineers who have >= 4.5 stars out of 5, >100 hours booked, and all the skills you need. Bonus points if they have steadily (but not crazily) increased their rates and gotten fives at each price point.

Perhaps 10 of your invitees will respond to your message, and 6 of them will take the work. Of that, 2-3 will literally deliver nothing (radio silent wastes of time). 2-3 will deliver despicable trash, but then 1-2 will deliver the real goods. If 1 of those engineers stands out markedly in terms of code quality or communication, it's an easy explanation to the rest of the pool. If 2 engineers both deliver, you're in luck. Pay both but get them both on the next assignment. The important thing is to show respect to all the engineers (even the jerks who blow you off). Be honest and upfront. Most will do the same with you.

Once you have a reliable contributor, add the star to your team, perhaps capped at 20 hours per week at first, to gauge interactions with the team and to gauge performance in an hourly capacity (the styles of which can vary). You're on your way.

### 6. A virtual team is still a team

Amazingly, we have better team communication as a rag-tag 9 person global team than my team had with 6 people at a single giant desk in Manhattan. Our remote team actively engages in code review, we collaborate over potential solutions to engineering problems, new engineers ask other engineers for advice, and we all know what each other is working on at all times.

It's not automatic, but my point is that you don't need to be the hub in a hub-and-spoke model just because the team is distributed. I was surprised and delighted when my team members starting answering each other's questions while I was sleeping, but now I have grown **very** accustomed, and it's fantastic to wake up to full queue of pull requests  to review each day.

The 2 power tools most responsible for enabling this are Github and Hipchat. Github is designed to support distributed teams for the sake of open source, but what works for open source works for distributed project teams, particularly if you build a culture of using pull requests for code review and discussion. Hipchat is a simple group chat client, but by piping in messages from all our systems (such as github, testing, and deployment), it becomes the very pulse of the company.

### 7. You need a product guy and an architect, not a CTO

The two skills most absent from oDesk (from my experience anyway) are the high-value-add roles of product guy and architect.

You need someone who knows the problem/product well enough to not only describe the solution intelligently (basically, every business guy), but also someone versed in how to build that solution into a "product" and how to make tough decisions about tradeoffs (not necessarily the case with many business guys). Like singing, it is the sort of thing everyone thinks they are good at but no one actually is. Maybe you're that person. Likely enough not.

You then need someone who can translate that product and all its complexity into a technical answer. This role can get clouded with CTO and Lead Engineer, neither of which are precisely the same, though often these skills exist in the same person. Just don't assume. The 2 most important qualities of the architect are:

* a **very** broad knowledge of new and old technologies that will solve your problem, including all the flashy new ways to cut what used to take years into what now takes weeks, and
* a **very** sincere fear and/or respect for how employing some of these new technologies can come with risks in terms of stability, engineer cost/availability, and so forth

The product guy and the architect provide the guidance and prioritization to the doers, and you're on your way.

## In Summary

We've had tremendous luck with oDesk, and I feel like we're only getting started. Hopefully these tips will be helpful to you as you dip your toes in (or go whole hog!). There's a world of talent out there, and you should put them to work.
